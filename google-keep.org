/Reflections on trusting trust/:

- https://dl.acm.org/doi/10.1145/358198.358210
- Ispezionabilità dei compilatori, supply chain attack
- Se il software è proprietario, il giudice può solo fidarsi/non fidarsi in maniera assoluta del suo corretto funzionamento, è quasi una prova legale
- Se il software è open source, diventa possibile valutare la probabilità che il software sia stato compromesso (ad es., valutare il compilatore, le dipendenze usate dal programma, ecc.), e quindi il giudice può valutare l'affidabilità in maniera più precisa

GPL:

- Dual licensing e spirito della GPL
- Advertising clause nella licenza BSD e incompatibilità con GPL
- Debian che usa GnuTLS anche se è codice meno affidabile

Manifesto GNU:

- Cf. Emacs
- Contiene chiarimenti su come funziona il software open source

Direttiva database: https://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=CELEX:31996L0009:EN:HTML#d1e626-20-1

- AFL++
- Virtualizzazione per usare strumenti di analisi già contenuti nel sistema, se il formato è proprietario o gli strumenti open-source sono incompleti (analisi live, ma ripetibile; problemi con la hardware detection anti-pirateria)
- Uso di linguaggi dichiarativi/funzionali invece che imperativi, minore performance ma anche meno bug (off by one, ecc), affidabilità come invarianza (funzioni pure - stesso input, stesso output), affidabilità come robustezza (controlli automatici per i tipi) -- preferire linguaggi di scripting o linguaggi compilati moderni e con GC o garanzie di memory-safety (Go, Rust), usare i systems programming languages solo se strettamente necessario (operazioni di basso livello)

- Citare tesi di dottorato (Gammarota, Ferrazzano, etc.)
- Scrivere contribuzioni su temi utili
- Auto ricerca: copyright (contatti), revenge porn, legalità scraping, modalità monetizzazione

- Lorenzo Pescatore -- barra tool, servizi offerti
- Roberto Arcella -- 
- SLPCT
- Programmi gestione firma digitale, marche temporali
- Conservazione sostitutiva, certificazione sostitutiva PEC

- Federici, firma digitale (FEA) con carta d'identità 

- CAD, processi telematici

---

Linux come strumento per la misurazione più preciso, "all our bugs belong to us"

QA:

- Statica: code review manuale, code analysis
- Dinamica: memory leaks (errori più comuni), fuzzying (programma si aspetta X, si ritrova Y: per errata nello standard, per modifiche accidentali, per modifiche intenzionali; comportamento imprevedibile, fuzzying serve a eliminare bug)

- Tarsnap: open-source, ma non free

---

- Chiedere libri
- Scrivere email a sviluppatori Linux 
- Pubblicare considerazioni su certificazione ENISA

Zanero, OS forensics

Tsurugi: Massimiliano Dal Cero
CAINE: Bassetti
Deft: Fratepietro
FIT: GitHub, López, Lazzarotto

Perri: GPL
Libro AIDA

--------

Con che mail contattare progetti

Forensics: marca temporale, strumenti open source?

Captatore, open source, certificazione

Reverse engineering (scatole nere), strumenti open source (VCS, reproducible builds)

Governance open-source, procedure, opportunità di approfondire

Linux e pacchetti

Opportunità in maniera più concreta, libri da fotocopiare

Pubblicazioni o libri che potrei scrivere

--------

- Governance open-source, sistemi di controllo della versione
- Licenze open-source
- Parte sull'informatica forense

- Se eliminare parte su cybersecurity

- Glossario con elenco dei termini tecnici all'inizio
- Mobile forensics: serve sbloccare telefono?

Esempio di compilazione: struct con codice, n. articolo, comma

---

Questionnaire:

- Licensing (CC-BY-SA, like Wikipedia/StackOverflow)
- Why they created a distro, from scratch or using another distro?
- What changes were made to the kernel? How (patches, compile-time configuration)? Were they contributed back (FOSS as a collaborative effort)? Are they adequately documented, even at a high level?
- What software was included? How was it pre-installed? Was any custom software written?

