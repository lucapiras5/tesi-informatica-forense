#+TITLE: Scaletta
#+AUTHOR: Luca Piras

* Introduzione
** Oggetto della tesi
- Come il free open-source software (FOSS) può beneficiare le discipline della information security (infosec) e digital forensics (DF).
** Struttura
- Il primo capitolo è dedicato alla definizione della nozione di open-source, e dei vantaggi e problemi che comporta.
- Il secondo capitolo è dedicato al sistema operativo GNU/Linux, composto esclusivamente da software open-source.

* Open source

** Riassunto

Definizione di software proprietario, libero, vantaggi e svantaggi del software open-source.

**Collegamenti legali.** Diritto d'autore (licenze open-source, reverse engineering).

** Software proprietario

*Limitazioni tecniche e/o legali.*  Lo sviluppo ed uso del software proprietario è soggetto a vincoli come brevetti, segreti industriali, e EULA (contratti per l'utilizzatore finale).

*DMCA, Information Society Directive.*  Il diritto d'autore regola il digital rights management, che impedisce l'uso, copia, modifica e analisi del programma.

** Software libero e licenze open-source

*Libertà garantite mediante il diritto d'autore*.

- Software che garantisce all'utente le facoltà che sono negate dal software proprietario, per mezzo del diritto d'autore.
- Il software libero è comunque soggetto al diritto d'autore, ma viene distribuito con delle licenze che non limitano, ma garantiscono implicitamente o espressamente, le libertà dell'utente.
- Il punto fondamentale è la disponibilità del codice sorgente (v. sez. succ.), che permette di studiare il funzionamento del programma.
- Le licenze open-source permettono anche la modifica e ridistribuzione del codice sorgente.
- Le licenze "copyleft" (GPL) impongono che ogni opera software derivata usi a sua volta una licenza copyleft, "obbligando" l'autore del software a garantire le libertà degli utilizzatori.
- Le licenze "permissive" (MIT) richiedono solo di citare l'autore originale se viene usato il suo codice, e le opere software derivate possono anche rimanere proprietarie (le modifiche non devono essere rilasciate al pubblico).
** Codice sorgente, compilazione
- Il codice sorgente deve essere compilato in codice macchina affinché possa essere eseguito da un computer.
- La compilazione è una trasformazione irreversibile, e non è possibile risalire al codice sorgente originale partendo dal codice macchina.
- La compilazione è un passo necessario, e anche il software libero deve essere compilato (da cui l'importanza di distribuire il codice sorgente), ma è utile per il software proprietario, perché "nasconde" come il software funziona.
** Reverse engineering
- Se si è in presenza di software proprietario, e si deve cercare di capire come funziona, si possono usare tecniche di reverse engineering (RE).
- Ad es., il formato NTFS di Windows per salvare i dati su disco non è documentato in maniera pubblica.  In questo caso, la RE studia come il software si comporta (così come la scienza studia i fenomeni naturali) per documentare in via "induttiva" il suo funzionamento.
- La RE entra in tensione con il diritto d'autore, brevetti, etc., anche se si sta agendo per fini legittimi (utilizzare quella conoscenza per una perizia all'interno di un processo).
- Potrebbe essere necessario copiare dati come chiavi segrete, che sono protette da copyright (cfr. SEGA, le chiavi crittografiche per i DVD), la RE stessa consiste nell'aggirare sistemi digitali di protezione dei diritti (vietato dal DMCA e dalla Information Society Directive), la documentazione prodotta al seguito della RE potrebbe essere considerata violazione di diritto d'autore, etc.
- Serve che i giudici riconoscano delle eccezioni al diritto d'autore come il "fair use" quando il RE è a fini educativi o informativi.
** Vantaggi del software libero
*** Decentralizzazione del processo di sviluppo:
- Non si annulla, ma si riduce significativamente il c.d. "maintainer hit by a bus problem".
- Nel caso del software proprietario, il suo sviluppo dipende esclusivamente da una sola persona o compagnia, e se venissero a mancare per qualsiasi motivo, il software smetterebbe di essere sviluppato.
- Il software open source è sviluppato da un grande numero di persone, e chiunque può continuare lo sviluppo se qualcosa succede allo sviluppatore principale.
*** Conservazione del codice:
- Il fatto che il codice è liberamente condivisibile significa anche che tutti possono facilmente acquisirne una copia.
- Pertanto, è sempre possibile avere accesso ad una specifica versione del software, a fini di riproducibilità.
*** Possibilità di studiare il codice sorgente:
- Non ci si deve fidare di come funziona il software proprietario, e se il suo funzionamento corrisponde a quanto promesso dagli sviluppatori, ma si può ispezionare il codice sorgente, e compilarlo di persona.
- Se il codice sorgente di un progetto open-source viene compromesso, si può notare subito, perché in linea teorica chiunque può controllare quali modifiche sono state aggiunte.
*** Possibilità di studiare i test del codice sorgente:
- La metodologia di sviluppo "Test-Driven Development" richiede che gli sviluppatori scrivano test per verificare che il software corrisponda alle specifiche tecniche richieste, e che versioni successive non siano soggette a bug già risolti in precedenza (c.d. "regressioni").
- Questa metodologia può essere usata anche nel software proprietario, ma nel caso del software open-source, c'è maggiore trasparenza: tutti possono verificare di persona quali test sono stati eseguiti, se i test sono stati superati, e suggerire altri test.
*** Network effect:
- Dato che può essere usato senza limitazioni, e tutti possono contribuire al suo sviluppo, il software viene diffuso e migliorato rapidamente.
- Per "tutti" si intende che in linea teorica, chiunque abbia le capacità tecniche può contribuire al progetto.
- Spetta agli sviluppatori del progetto controllare che le modifiche proposte siano in buona fede, non siano dannose, siano state testate, siano coerenti con lo scopo del progetto, etc.
- Se esistono disaccordi su come continuare lo sviluppo del software, la natura delle licenze open-source permette di fare un "fork", per cui la parte che è in disaccordo può continuare in autonomia, e i due progetti possono continuare a condividere codice fra di loro.
- Maggiore stabilità:
- Il software viene eseguito da un grande numero di persone, su un grande numero di piattaforme, il che permette di trovare e risolvere errori di programmazione (che potrebbero riguardare solo una piattaforma particolare) più velocemente.
*** Il codice è documentazione:
- Specie nel caso in cui il software open-source re-implementa delle funzionalità che sono presenti solo nel software proprietario mediante tecniche di reverse-engineering, il software open-source diventa di fatto anche quasi una "specifica tecnica" che documenta pubblicamente il funzionamento del software proprietario, in mancanza di una documentazione tecnica ufficiale rilasciata dallo sviluppatore.
- Ad es., NTFS-3G per il formato NTFS, Volatility per il formato del file di ibernazione della RAM di Windows, Wine per l'esecuzione di programmi Windows su Linux, etc.)
*** Convenienza per i progetti proprietari:
- Anche i progetti proprietari possono beneficiare dal diventare (parzialmente) open-source.
- Spesso il software proprietario viene modificato dai suoi utilizzatori per aggiungere nuove funzionalità, o per correggere bug.  Apportare questi miglioramenti sarebbe molto più semplice se il software fosse open-source.
- È possibile rendere open-source anche solo parte del progetto, e lasciare la parte del progetto in cui risiede il vantaggio competitivo del progetto closed-source.
- Ad es., vari programmi offrono una "community edition" gratuita, ed una "enterprise edition" a pagamento; Google Chrome è proprietario, ma Google offre anche Chromium: sono essenzialmente lo stesso browser, con l'unica differenza che Chromium non è integrato con i servizi proprietari di Google.
** Svantaggi del software libero
*** Mancanza di supporto dalle grandi aziende
- Le grandi aziende potrebbero non volere (per non rivelare i loro segreti industriali) o non potere (per ragioni legali di proprietà intellettuale) offrire software open-source.
- Ad es., mentre Intel e AMD offrono driver open source per le loro schede video, in modo che possano essere utilizzate su Linux, Nvidia ha tradizionalmente fornito solo driver closed-source, ed ostacolato l'uso dei loro prodotti con Linux.
*** Finanziamenti
- Spesso, ma non sempre, il software open-source è sviluppato da volontari.  Questo non vuol dire che la qualità del codice sia minore, gli sviluppatori sono pur sempre professionisti, o comunque hanno esperienza tecnica, ma significa che gli sviluppatori non possono dedicare la loro piena attenzione al progetto.
- Il problema può essere risolto vendendo assistenza tecnica per il prodotto open-source (ad es., servizi di consulenze, offrendo di sviluppare certe funzionalità in cambio di una retribuzione), oppure vendendo il software open-source come un servizio (SaaS), oppure offrendo il software con due licenze (se il programma open-source viene usato in un progetto proprietario si usa una licenza commerciale in modo che gli sviluppatori siano retribuiti, ma se viene usato in un altro progetto open-source, viene offerto con una normale licenza open-source).
*** Difficoltà di uso:
- Spesso il software libero è meno "user-friendly" rispetto al software commerciale per Windows/OS X, può non avere intefacce grafiche, o può richiedere che l'utilizzatore abbia una minima dimestichezza con GNU/Linux o la riga di comando.
- In verità, anche il software proprietario è comunque complesso e non immediatamente intuitivo da un punto di vista tecnico, ed in ogni caso, è sempre possibile sviluppare interfacce grafiche per programmi a linea di comando.
* GNU/Linux
- Il software è l'ultimo anello nella catena di un computer, ed è preceduto dal sistema operativo e dall'hardware.  La catena è affidabile solo quanto il suo anello più debole.
- È possibile eseguire un programma open-source anche su un sistema operativo proprietario come Windows, ma ci si deve fidare di una "scatola nera", di cui non si conosce l'esatto funzionamento.
- GNU/Linux è un intero sistema operativo open-source, il che permette di portare tutti i vantaggi del software open-source su due anelli della catena.
** Introduzione a GNU/Linux
- Linux: Unix, Minix, Linux.
- GNU: rapporto con Unix, con Linux.
** Gestione dei pacchetti
- A differenza di Windows, non esiste una versione "standard" di GNU/Linux, ma per la natura del software open-source, esistono numerose distribuzioni.
- Gli sviluppatori upstream (a monte) distribuiscono il codice sorgente, indicando di quali librerie il loro programma ha bisogno per funzionare (c.d. dependencies).
- Chi gestisce le distribuzioni GNU/Linux downstream (a monte) riceve il codice sorgente, e lo adatta alle peculiarità della propria distribuzione, e produce un "pacchetto" che contiene le istruzioni per installare il software.
- Successivamente, il software viene installato dagli utenti finali con il gestore di pacchetti della propria distribuzione.
- Modelli di distribuzione:
- Fixed-point: l'intero sistema viene aggiornato semi-periodicamente, il software è stabile ma obsoleto.
- Rolling: ogni componente del sistema viene aggiornato appena è disponibile una nuova versione, il software è sempre aggiornato, ma potrebbe essere instabile.
- Functional:
  - Il sistema viene aggiornato appena è disponibile una nuova versione, ma le versioni precedenti rimangono comunque disponibili, e si può tornare ad utilizzarle in qualsiasi momento.
  - Questo permette di avere un sistema pienamente riproducibile.
- Pacchetti binari, pacchetti sorgente:
- Le distribuzioni normalmente offrono pacchetti già compilati (binari), così che possano essere utilizzati subito.  Questo implica doversi fidare degli sviluppatori upstream.
- Volendo (alcune distribuzioni lo fanno di default) è possibile scaricare un pacchetto sorgente, in modo da ispezionare i suoi contenuti (in particolare, le modifiche che sono state apportate per adeguare il software alla distribuzione) prima di compilarlo ed utilizzarlo.
** Reproducibile builds
- In ogni caso, rimane sempre possibile scaricare il software open-source direttamente dallo sviluppatore upstream, e compilarlo ed installarlo manualmente.
- In particolare, per esigenze di sicurezza e riproducibilità, si può configurare l'insieme di strumenti usati per sviluppare e compilare software, in modo da garantire la riproducibilità del software compilato.
- Per riproducibilità si intende che lo sviluppatore e l'utente finale possono confermare di ottenere lo stesso, identico file eseguibile, per eliminare ogni dubbio riguardo l'affidabilità ed autenticità del codice sorgente.
* Information security (sicurezza informatica)
- Obiettivi: garantire l'integrità e confidenzialità delle informazioni.
- Collegamenti legali: regolamenti sulla privacy, data breach, leggi che regolano la crittografia, leggi che autorizzano o richiedono l'uso di misure di sicurezza informatiche (firme digitali).
- Collegamenti alla DF: la DF interviene dopo che le misure di sicurezza sono state violate per capire cosa sia successo, e quali dati sono stati compromessi, le tecniche di sicurezza dei dati ostacolano l'analisi forense (ad es., crittografia dell'intero disco, captatori informatici che usano vulnerabilità dei dispositivi, etc...)
** Crittografia
- La crittografia di sua natura deve essere "open-source", in modo che sia gli algoritmi, sia il codice sorgente che li implementa, sia soggetto a peer-review.
- Qualsiasi sistema crittografico che non sia pubblicamente discusso è intrisecamente inaffidabile, ed anche i sistemi pubblicamente disponibili devono essere considerati insicuri fino a prova contraria.
- La crittografia viene largamente usata per proteggere le informazioni (sia in transito, sia salvate su disco), e per dimostare la propria identità (le firme digitali richieste dalla PA, utilizzate dagli sviluppatori nelle reproducibile builds).
- Gli algoritmi crittografici sono importanti anche per l'hash dei dati per la digital forensics.
- Regolamentazione della crittografia per limitarne l'efficacia da parte dei governi, così da non limitare le operazioni di surveillance.
** Penetration testing
- L'open-source aiuta a prevenire la "security through obscurity", dove un sistema è considerato sicuro solo perché i meccanismi del suo funzionamento non sono noti al pubblico.
- L'hacking etico ed autorizzato, dette anche operazioni di "red team" (contrapposto al "blue team", che prepara il sistema da difendere) serve a provare la sicurezza dei sistemi informatici.
- Si usano le stesse tecniche che sarebbero usate da un cybercriminale, in modo da prevenire eventuali attacchi.
- Esistono distribuzioni GNU/Linux dedicate all'ethical hacking, come Kali Linux ed altre.
- Le caratteristiche del software open-source sono utili per gli strumenti dedicati a valutare la sicurezza di un sistema informatico.
- L'effetto rete e la concentrazione di conoscenza permette di costruire più rapidamente delle sequenze di test che verificano se un sistema è vulnerabile ad un certo tipo di attacchi informatici.
- Anche se il software di cui si deve provare la sicurezza rimane proprietario, è importante che il software che esegue quelle sequenze di test sia open-source, in modo da permettere una sorta di "peer-review" del loro contenuto, il loro continuo aggiornamento mano a mano che vengono scoperte nuove vulnerabilità.
- Il costo nullo e la facilità di distribuzione rendono questi strumenti disponibili a chiunque abbia il tempo e le conoscenze tecniche per impararli ad utilizzare, e più persone "bene intenzionate" hanno la capacità di verificare se un sistema sia sicuro o meno, e più è probabile che eventuali vulnerabilità nel sistema siano risolte prima che vengano abusate da criminali.
- Esempi di progetti open-source per la sicurezza come Metasploit, American Fuzzy Lop, etc.
* Digital forensics (informatica forense)
** Obiettivi
- Garantire la conservazione della prova digitale dal momento dell'acquisizione in poi.
- Interpretare i dati, e riscostruire le dinamiche che hanno portato a quell'assetto
- In particolare, capire se i dati sono stati manipolati prima o dopo l'acquisizione, e se accidentalmente o di proposito.
** Collegamenti legali
- Codice penale: regola i reati contro sistemi informatici, ma l'informatica forense può essere utilizzata per raccogliere informazioni da sistemi informatici anche dopo il compimento di reati tradizionali.
- Codice di procedura penale: detta i principi generali su come trattare le prove informatiche.
- Standard tecnici: formalizzano le procedure necessarie per garantire la corretta acquisizione e conservazione della prova digitale.
- Giurisprudenza sulla prova scientifica: come la prova scientifica in generale, e la digital evidence in particolare, devono essere valutate dal giudice, commenti sulle sentenze che trattano di aspetti tecnici della DF.
** Differenze con la sicurezza informatica
- La sicurezza informatica ha natura preventiva, serve ad evitare che i sistemi siano colpiti da attacchi, e non si interessa in maniera particolare di "come" funziona il software, ma solo se il software sia sicuro o meno.
- L'informatica forense interviene durante o dopo un attacco informatico, e serve a raccogliere elementi utili per capire come l'attacco ha avuto inizio, quali dati sono stati sottratti o distrutti, e altri elementi utili per le indagini penali.
- Dato che l'informatica forense deve essere in grado di rilevare le tracce dell'evento, e ricostruire la dinamica dei fatti, per questa disciplina è necessario sapere "come" il software funzioni, quali informazioni produca, ecc.
- Inoltre, mentre la cybersecurity è esclusivamente legata alla protezione di un sistema informatico come oggetto di attacchi, le tecniche di informatica forense possono essere utilizzate anche per reati non informatici.
** Vantaggi del software open-source
- Pieno rispetto del diritto di difesa e del principio del contraddittorio:
  - Se vengono usati strumenti open-source, l'imputato può difendersi meglio, perché può conoscere come funziona il programma.
- Piena riproducibilità dei risultati:
  - Dato che il software open source è liberamente ridistribuibile, è possibile depositare una copia degli strumenti che sono stati utilizzati, o anche dell'intero sistema operativo che è stato utilizzato per svolgere l'analisi, compresi i risultati stessi, senza violare il diritto d'autore.
  - In ogni caso, è sempre possibile ricompilare la esatta versione del programma che era stata utilizzata al momento dell'analisi.
- Costi minori e maggiore efficienza:
  - Non si devono pagare licenze per software proprietario, ed il sistema operativo può essere ottimato per le operazioni di digital forensics.
  - Inoltre, per i programmi che usano la linea di comando, si possono usare i c.d. shell script per automatizzare le operazioni ripetitive
- Maggiore affidabilità:
  - "Open-source" non significa che chiunque può contribuire al progetto, o che gli sviluppatori non siano professionisti o non abbiano conoscenze tecniche.
  - È stato dimostrato che il software open-source tende ad avere meno bug, proprio perché ci sono meno barriere al suo utilizzo e sviluppo.
  - Inoltre, gli sviluppatori non hanno nessun incentivo commerciale a nascondere i difetti del loro programma.
- Maggiore privacy e sicurezza:
  - È ben noto che Windows raccoglie e invia grandi quantità di dati alla Microsoft, ed è probabile che anche il software proprietario includa questo tipo di misure.
  - Viceversa, GNU/Linux ed i programmi open-source non hanno nessun incentivo commerciale a sottrarre dati dagli utenti.
** Acquisizione di dischi
- Collegamenti legali: sequestro di file, quanti dati acquisire (in teoria il minimo indispensabile, ma è necessario acquisire l'intero disco per poter compiere un'analisi completa), conservazione sicura dei dati dopo la loro acquisizione.
- Il kernel Linux può essere compilato in modo che tutti i dispositivi siano montati in sola lettura.
- GNU dd è maggiormente affidabile rispetto al suo equivalente UNIX.
** Acquisizione di dati da fonti che non siano un disco
- Collegamenti legali: acquisizione di file da servizi senza bisogno di rogatoria internazionale.
- Nei casi in cui non sia possibile acquisire un disco con la copia forense, è necessario copiare i singoli file, cercando di preservare quanti più metadati possibile, e disturbando gli altri dati il meno possibile.
- Ad es., acquisizioni di dati da smartphone, da servizi di backup personale come Dropbox o Google Drive, da servizi di data storage come Amazon Web Services, da servizi proprietari come Google Takeout.
** Acquisizione di dati dalla RAM e file di ibernazione
- Collegamenti legali: inaffidabilità intrinseca di questi dati, utilizzabili al più come elemento indiziario.
- Difficoltà tecniche: acquisire la RAM mentre il sistema è acceso va a modificarla, si deve acquisire anche la memoria virtuale salvata su disco/file di swap per avere un'acquisizione completa,  i formati sono proprietari e non documentati, le tecniche di analisi non sono particolarmente raffinate.
** Analisi di un disco
- Collegamenti legali: applicazione delle categorie tradizionali ai dati digitali.
- Autopsy: operazioni che è possibile compiere, confronti con software proprietario.
- Programmi per il data carving, la creazione di timeline.
** Analisi del traffico di rete
- Collegamenti legali: differenza con l'intercettazione propriamente detta.
- Uso di Wireshark per l'acquisizione forense di siti web.
** Sequestro di Bitcoin
- Collegamenti legali: definizione legale di Bitcoin e criptovalute.
- Le applicazioni per la gestione dei Bitcoin sono generalmente open-source, quindi è più facile sapere dove il wallet viene salvato, in quale formato, e quali altre informazioni utili per le indagini sono generate dal software (ad es., la lista delle transazioni, etc.)
