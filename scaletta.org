#+TITLE: Scaletta della tesi -- Apologia per l'utilizzazione di distribuzioni GNU/Linux e software FOSS per la digital forensics
#+AUTHOR: Luca Piras
#+LANGUAGE: it

* Introduzione alla tesi

** Scelta del titolo

Le apologie[fn:1] erano discorsi pronunciati in difesa di una persona o una fede.[fn:2]

La presente tesi vuole in primo luogo confutare l'opinione che le applicazioni libere e a sorgente aperta siano utili /solo/ ad amatori e dilettanti, mentre i professionisti /devono/ usare solo applicazioni proprietarie.

Inoltre, vuole dimostrare che:

- Nella ricostruzione dei fatti in un processo, le applicazioni proprietarie possano avere più funzionalità rispetto alle applicazioni libere e a sorgente aperta, ma al grave costo di essere intrinsecamente inaffidabili, e di creare risultati potenzialmente non riproducibili.
- Le applicazioni libere e a sorgente aperta sono maggiormente affidabili, possono produrre risultati riproducibili, e che in molti casi le funzionalità sono equivalenti rispetto alle applicazioni proprietarie.

** Struttura

La tesi è divsa in tre parti.

La prima parte fornisce delle nozioni di base: spiega cosa siano esattamente /GNU/Linux/, le filosofia /free/libre and open-source/, e la /digital forensics/.

La seconda parte è la vera e propria apologia: consiste in una serie di argomenti tecnici e giuridici che dimostrano la superiorità teorica del FLOSS rispetto al software proprietario.

La terza parte entra nel concreto: si discutono quali applicazioni FLOSS vengono usate per la DF, e le relative potenzialità ed i limiti.

* Definizioni

** Unix

- Tutto inizia da Unix:
  - GNU vuole essere compatibile con i programmi di Unix, e migliorarlo.[fn:3]
  - Linux nasce come un clone di Minix,[fn:4] che a sua volta era un clone di Unix.[fn:5]
  - Persino il tempo viene contato facendo riferimento alla /epoca Unix/.[fn:6]
- Unix nasce all'inizio degli anni '70, e nel 1972 viene riscritto in C.
  - Distinzione fra codice sorgente e codice compilato.
  - Accenno ai linguaggi di scripting (non devono essere interpretati, Volatility è usato per l'analisi della RAM ed è scritto in Python) ed ai linguaggi che usano una rappresentazione intermedia ed una macchina virtuale (Python, Java, ELisp).
  - Il fatto che Unix fosse scritto in C ha permesso la sua diffusione: /Unix and C are the ultimate computer viruses./[fn:7]
- TODO: Come Unix diventa proprietario

** FLOSS

- Tradizionalmente il codice non valeva molto, veniva considerato parte integrante della macchina, il mercato del software proprietario si afferma solo dopo.[fn:8]
- Il codice sorgente è soggetto a copyright.[fn:9]
- Le licenze open-source riconoscono il copyright degli autori, ma permettono la ridistribuzione del codice.
- Caso eccezionale: SQLite è nel pubblico dominio.[fn:10]
- Distinzione: software proprietario, source-available, free/libre.
- Libertà garantite dal software libre.[fn:11]
- Esistono due modelli di licenze: copyleft e permissive.
- Vantaggi e svantaggi dei modelli.
- Licenze copyleft:
  - Impone la sua perpetuazione.
  - Varianti: GPL, LGPL, AGPL
  - GPL v3 e Tivoization
- Licenze permissive:
  - Le modifiche possono rimanere proprietarie, ma è difficile continuare ad integrare modifiche proprietarie, è più semplice mandarle upstream.
- Svantaggi delle licenze permissive:
  - Stallman crea la GPL
  - Android non è una distribuzione libre (Stallman 2011)[fn:12] ed usa una licenza permissiva per ragioni di convenienza (Android Developers 2022).[fn:13]
  - Il sistema operativo per smartphone Android, usa Linux [cite:@android-developers-2023-platform-architecture], ma non GNU [cite:@stallman-2011-is-android-really-free-software].
- Svantaggi delle licenze copyleft:
  - https://www.gnu.org/licenses/why-not-lgpl.html
  - https://github.com/JoshCheek/clisp/blob/master/doc/Why-CLISP-is-under-GPL
  - https://www.thrysoee.dk/editline/
  - https://github.com/hanslub42/rlwrap
  - [[https://www.debian.org/vote/2006/vote_001][Debian non considera la GFDL abbastanza libera]]

** GNU

- GNU nasce prima di Linux
- Fornisce una serie di programmi strettamente necessari per un sistema operativo, tra cui:
  - Una shell: programma per lanciare altri programmi
  - Un editor di testo: programma per modificare file di testo
  - Un compilatore: programma che converte file di testo in programmi eseguibili
- Il resto dei programmi sono stati sviluppati da altri:
  - Ad es., l'interfaccia grafica X, GTK e Qt, i DE, etc.
- GNU è generalmente compatibile con Unix, e segue lo standard POSIX, ma ci sono delle differenze (longopts, POSIXLY_CORRECT, Bash non rispetta POSIX, etc.)

Le distribuzioni che /non/ usano GNU sono l'eccezione.

Distribuzioni specificamente progettate per sistemi integrati, come OpenWRT,[fn:14] o comunque genericamente progettate per utilizzare la minore quantità di risorse possibili, come Alpine Linux,[fn:15] che sostituiscono tutti gli applicativi del sistema operativo GNU con un singolo applicativo, chiamato BusyBox.[fn:16]

** Linux

Cf. https://www.polimata.eu/digital-life/kernel-spiegazione/

Licenza del kernel: GPL v2, Tivoization

Elementi proprietari nel kernel (binary blobs), versioni del kernel pienamente libre

Tende ad avere maggiore supporto hardware rispetto ai vari  kernel *BSD

** Distribuzioni GNU/Linux

*** GNU/Linux è una famiglia di distribuzioni

Così come non esiste "un" Unix, ma esistono più sistemi operativi derivati da Unix, non esiste "un" Linux, ma piuttosto, un numero di /distribuzioni Linux/.[fn:17]

Linux in sé non è nemmeno un sistema operativo, ma soltanto un suo componente fondamentale [cite:@stallman-2021-linux-and-gnu-it].

Ogni distro[fn:18] usa il /kernel Linux/, e la stragrande maggioranza usa il /sistema operativo GNU/.

- È possibile creare una distribuzione partendo da zero, se si hanno le conoscenze tecniche necessarie
- Esistono distribuzioni generiche e distribuzioni specifiche, e molte distribuzioni sono riconducibili ad altre

*** Package manager (gestore dei pacchetti)

L'elemento più centrale di una distro è il gestore di pacchetti, il software viene installato mediante pacchetti

La politica di distribuzione dei pacchetti varia da distro a distro: cosa includere, ogni quanto rilasciare aggiornamenti, etc.

Il software proprietario può installare repository di terze parti (ad es. Chrome)

*** Arch

Rolling e pragmatica

Aggiornamenti costanti sono desiderabili solo per gli strumenti di analisi

Manjaro: semi-stabile, BlackArch e Arch... distribuzioni orientate verso la sicurezza

*** Debian

Una delle distro più antiche ancora in uso

Fixed-point[fn:19] e DFSG

Aggiornamenti consistono solo di patch per la sicurezza, "stabile" significa che i bug sono conosciuti e "prevedibili"

Ubuntu, Kali

*** Nix

Il meglio dei due mondi

Build pienamente riproducibili (v. anche Guix), configurazione descrittiva

** Digital forensics

- Definizione di informatica forense
- Definizione di informatica e di scienze forensi
- Evoluzione verso la digital forensics
- Problemi epistemologici nella ricerca della verità
- Necessità di una formalizzazione e definizione di best practices
- Crisi della riproducibilità negli studi scientifici
- Standard ISO sulla digital evidence
- Principi generali sul trattamento della prova informatica:
  - Convenzione di Budapest
  - Principi generali su come trattare i dati informatici nel codice di procedura penale italiano
- Natura della prova informatica:
  - Natura dei dati digitali e della prova informatica secondo la dottrina e la Cassazione
- Aspetti pratici della prova informatica:
  - Mezzi di ricerca della prova informatica
    - Sequestro probatorio, ispezione e perquisizione, intercettazioni
  - Modalità di assunzione della fonte di prova informatica
    - Prova documentale, atipica, perizia/consulenza tecnica

* Ragioni a favore di GNU/Linux ed il FOSS

- Per il mondo enterprise (ad es., incident response) non interessa se gli strumenti sono open-source o meno, la cosa più importante è che funzionino
- Diritto alla difesa: costo nullo
- Valutazione delle prove: ispezione del codice sorgente
- Obiezioni:
  - Il costo degli strumenti enterprise è giustificato dal loro supporto dedicato

* Utilizzazione pratica di GNU/Linux

* Bibliografia

#+print_bibliography:

* Footnotes

[fn:1] Vedi https://www.treccani.it/vocabolario/apologia.

[fn:2] Tradizionalmente, il cristianesimo.  Tuttavia, nel mondo GNU/Linux gli utilizzatori più fedeli dell'editor di testo /Emacs/ hanno scherzosamente creato la /Chiesa di Emacs/, presieduta da /San IGNUzio/.  V. https://stallman.org/saint.html.

[fn:3] Stallman, 1983.

[fn:4] Torvalds, 1991.

[fn:5] Tanenbaum, 1987, p. 21.

# TODO: serve approfondire il tema dell'Unix epoch?
[fn:6] Vedi https://unixtime.org/ e https://2038.wtf/.

[fn:7] Gabriel, 1991.

# TODO: articoli sul come il software originariamente non era portatile, ed era maggiormente legato ad una certa architettura.
[fn:8] Gonzalez-Barahona, 2021, p. 75.

# TODO: articoli sul software come oggetto di diritto d'autore e come proprietà intellettuale.
[fn:9] Serve una fonte sulla convenzione di Berna.

[fn:10] Autori di SQLite, n.d. [[https://www.sqlite.org/copyright.html][SQLite Is Public Domain]].

[fn:11] Stallman, 2021. [[https://www.gnu.org/philosophy/free-sw.html][What is Free Software?]].

[fn:12] V. https://www.theguardian.com/technology/2011/sep/19/android-free-software-stallman.

[fn:13] V. https://source.android.com/docs/setup/about/licenses.

[fn:14] Cf. https://openwrt.org/start

[fn:15] Cf. https://www.alpinelinux.org/about/

[fn:16] Cf. https://busybox.net/about.html

[fn:17] Per una una panoramica delle principali distribuzioni, cf. https://distrowatch.com/dwres.php?resource=major.

[fn:18] /Distro/, pl. /distros/ è l'abbreviazione colloquiale di /distribution/.

[fn:19] Cf. https://wiki.debian.org/it/DebianReleases
